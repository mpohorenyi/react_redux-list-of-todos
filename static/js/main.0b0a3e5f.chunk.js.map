{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","helpers/getFilteredTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialFilter","query","status","filterReducer","filter","todosReducer","todos","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","className","id","completed","cn","title","onClick","currentTodoActions","TodoList","visibleTodos","filteredTodos","normalizedQuery","toLowerCase","includes","getFilteredTodos","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","userFromServer","catch","Error","finally","href","email","name","App","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0a3e5f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\nimport { Status } from '../types/Status';\n\ntype AddStatusAction = { type: 'filter/ADD_STATUS', payload: Status };\ntype AddQueryAction = { type: 'filter/ADD_QUERY', payload: string };\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\n\ntype Action = AddStatusAction | AddQueryAction | ClearQueryAction;\n\nconst AddStatus = (payload: Status): AddStatusAction => (\n  { type: 'filter/ADD_STATUS', payload });\nconst AddQuery = (payload: string): AddQueryAction => (\n  { type: 'filter/ADD_QUERY', payload });\nconst ClearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nconst initialFilter: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (filter: Filter = initialFilter, action: Action) => {\n  switch (action.type) {\n    case 'filter/ADD_STATUS':\n      return { ...filter, status: action.payload };\n\n    case 'filter/ADD_QUERY':\n      return { ...filter, query: action.payload };\n\n    case 'filter/CLEAR_QUERY':\n      return { ...filter, query: '' };\n\n    default:\n      return filter;\n  }\n};\n\nexport const actions = { AddStatus, AddQuery, ClearQuery };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadAction = { type: 'todos/LOAD', payload: Todo[] };\n\ntype Action = LoadAction;\n\nconst load = (payload: Todo[]): LoadAction => ({ type: 'todos/LOAD', payload });\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD': {\n      return action.payload;\n    }\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { load };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-success': todo.completed,\n            'has-text-danger': !todo.completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': currentTodo?.id !== todo.id,\n                'fa-eye-slash': currentTodo?.id === todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { useAppSelector } from '../../app/hooks';\nimport { getFilteredTodos } from '../../helpers/getFilteredTodos';\n\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const filter = useAppSelector(state => state.filter);\n  const visibleTodos = getFilteredTodos(todos, filter);\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <TodoItem key={todo.id} todo={todo} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { Filter } from '../types/Filter';\nimport { Todo } from '../types/Todo';\n\nexport function getFilteredTodos(todos: Todo[], filter: Filter) {\n  let filteredTodos = [...todos];\n\n  if (filter.status !== 'all') {\n    filteredTodos = filteredTodos.filter((todo) => {\n      switch (filter.status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  if (filter.query) {\n    const normalizedQuery = filter.query.toLowerCase();\n\n    filteredTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(normalizedQuery)\n    ));\n  }\n\n  return filteredTodos;\n}\n","import React from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query } = useAppSelector(state => state.filter);\n\n  const handleSelectStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.AddStatus(event.target.value as Status));\n  };\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.AddQuery(event.target.value));\n  };\n\n  const handleClearSearch = () => {\n    dispatch(filterActions.ClearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(todo.userId)\n      .then(userFromServer => setUser(userFromServer))\n      .catch(() => new Error())\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todosFromServer => dispatch(todosActions.load(todosFromServer)))\n      .catch(() => new Error())\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!!todos.length && (\n                <TodoList todos={todos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}